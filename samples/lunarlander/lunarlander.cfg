 Tagname	Driver	FullAddress	Description	Type	Value	DecPlaces	Mode	CycleTime	EULo	EUHi	RawLo	RawHi	IOChar	Algorithm	Params
CrashThreshold			EU=m/s;  If the lander lands with a Y velocity more than this, it crashes	ANL	7.500000	2	Auto	0.050000	0.0	10.0	10.000000	10.000000	Linear	Null	0.75
Crashed	BONSAI		EU=m/s;  Has the lander crashed?	DIG	0.000000	2	Auto	0.050000	Intact	Crashed	0.000000	1.000000	Linear	FlipFlop	(y_position.PVE > 0), ((y_position == 0) && (y_velocity.PVE < (0-CrashThreshold.PVE)))
Gravity			EU=N/kg; Acceleration  due to gravity	ANL	49.000000	3	Auto	0.050000	0.0	20.0	0.000000	20.000000	Linear	Null	
Mass			EU=kg; Mass of the Lander	ANL	9.909910	3	Auto	0.050000	1.0	1000.0	0.000000	20.000000	Linear	Null	
Random			Acceleration  due to gravity	ANL	4.766991	3	Auto	0.050000	0.0	20.0	0.000000	20.000000	Linear	Random	
RelWindVel			Is the wind, relative to the lander, blowing it to the left (-1) or to the right (+1)	ANL	50.000000	2	Auto	0.050000	-1.0	1.0	-1.000000	1.000000	Linear	CTrackPVE	1, (wind.PVE > x_velocity.PVE); -1, (wind.PVE < x_velocity.PVE); 0
angle	BONSAI		EU=deg;  Sort of like position	ANL	0.000000	3	Auto	0.050000	0.0	360.0	0.000000	360.000000	Linear	Null	
engine1	BONSAI		Thrust from the vertical engine, scaled to match 2 Gs with a 100kg lander.	ANL	50.000000	3	Auto	0.050000	0.0	1.0	-1.000000	1.000000	Linear	Null	
engine2	BONSAI		Net thrust from the horizontal engines.	ANL	50.000000	3	Auto	0.050000	-1.0	1.0	-1.000000	1.000000	Linear	Null	
fuel			EU=kg;  Amount of fuel left in lander.  1 kg can hover a 100 kg lander for 1 second.	ANL	50.000000	2	Manual	0.050000	0.0	200.0	0.000000	200.000000	Linear	AccumPVE	(engine1 * 2.5), -60; (engine2 * 0.25), -60, (engine2.PVE > 0); (engine2 * 0.25), 60, (engine2.PVE < 0)
left_leg	BONSAI		Do not know what this is	ANL	0.000000	3	Auto	0.050000	0.0	100.0	0.000000	100.000000	Linear	Null	
right_leg	BONSAI		Do not know what this is	ANL	0.000000	3	Auto	0.050000	0.0	100.0	0.000000	100.000000	Linear	Null	
rotation	BONSAI		EU=deg/s;  Sort of like velocity	ANL	50.000000	3	Auto	0.050000	-300.0	300.0	-300.000000	300.000000	Linear	Null	
wind			EU=m/s;  Speed of the "wind", which causes a horizontal force.  The force from the wind is proportional to the wind speed squared	ANL	50.000000	2	Manual	0.050000	-10.0	10.0	10.000000	10.000000	Linear	Null	
x_position	BONSAI		EU=m; distance left or right of the target	ANL	40.000000	3	Auto	0.050000	-50.0	50.0	-50.000000	50.000000	Linear	AccumPVE	x_velocity, 60, y_position
x_velocity	BONSAI		EU=m/s;  Velocity left or right	ANL	50.000000	2	Auto	0.050000	-100.0	100.0	-100.000000	100.000000	Linear	AccumPVE	(2 * engine2*(100/Mass)), 60, fuel, y_position; ((100/Mass)*RelWindVel*((wind-x_velocity)/10)^2), 60, y_position
y_position	BONSAI		EU=m; distance above the surface.	ANL	40.000000	3	Auto	0.050000	0.0	100.0	0.000000	50.000000	Linear	AccumPVE	y_velocity, 60, ((y_position.PVE > 0) || (y_velocity.PVE > 0))
y_velocity	BONSAI		EU=m/s;  Velocity up (positive) or down	ANL	50.000000	2	Auto	0.050000	-100.0	100.0	-100.000000	100.000000	Linear	CTrackPVE	y_velocityAccum, ((y_position.PVE > 0) || (y_velocityAccum.PVE > 0))
y_velocityAccum	BONSAI		EU=m/s;  Trial velocity up (positive) or down	ANL	50.000000	2	Auto	0.050000	-100.0	100.0	-100.000000	100.000000	Linear	IntegPVE	y_velocity; (engine1 * 2 * 9.8*(100/Mass)), 60, fuel; Gravity, -60
